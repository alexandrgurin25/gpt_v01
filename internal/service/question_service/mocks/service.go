// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/service.go -package=mocks -source=service.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/internal/entity"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAnswerClient is a mock of AnswerClient interface.
type MockAnswerClient struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerClientMockRecorder
}

// MockAnswerClientMockRecorder is the mock recorder for MockAnswerClient.
type MockAnswerClientMockRecorder struct {
	mock *MockAnswerClient
}

// NewMockAnswerClient creates a new mock instance.
func NewMockAnswerClient(ctrl *gomock.Controller) *MockAnswerClient {
	mock := &MockAnswerClient{ctrl: ctrl}
	mock.recorder = &MockAnswerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswerClient) EXPECT() *MockAnswerClientMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *MockAnswerClient) Request(text string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", text)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockAnswerClientMockRecorder) Request(text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockAnswerClient)(nil).Request), text)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CountQuestionsByUserIdAtToday mocks base method.
func (m *MockRepository) CountQuestionsByUserIdAtToday(ctx context.Context, userId string, createdAt time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountQuestionsByUserIdAtToday", ctx, userId, createdAt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountQuestionsByUserIdAtToday indicates an expected call of CountQuestionsByUserIdAtToday.
func (mr *MockRepositoryMockRecorder) CountQuestionsByUserIdAtToday(ctx, userId, createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountQuestionsByUserIdAtToday", reflect.TypeOf((*MockRepository)(nil).CountQuestionsByUserIdAtToday), ctx, userId, createdAt)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, userId, text string) (*entity.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, text)
	ret0, _ := ret[0].(*entity.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, userId, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, userId, text)
}

// MockPremiumService is a mock of PremiumService interface.
type MockPremiumService struct {
	ctrl     *gomock.Controller
	recorder *MockPremiumServiceMockRecorder
}

// MockPremiumServiceMockRecorder is the mock recorder for MockPremiumService.
type MockPremiumServiceMockRecorder struct {
	mock *MockPremiumService
}

// NewMockPremiumService creates a new mock instance.
func NewMockPremiumService(ctrl *gomock.Controller) *MockPremiumService {
	mock := &MockPremiumService{ctrl: ctrl}
	mock.recorder = &MockPremiumServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPremiumService) EXPECT() *MockPremiumServiceMockRecorder {
	return m.recorder
}

// CheckPremium mocks base method.
func (m *MockPremiumService) CheckPremium(ctx context.Context, userId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPremium", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPremium indicates an expected call of CheckPremium.
func (mr *MockPremiumServiceMockRecorder) CheckPremium(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPremium", reflect.TypeOf((*MockPremiumService)(nil).CheckPremium), ctx, userId)
}
